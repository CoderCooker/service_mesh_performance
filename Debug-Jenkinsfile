int retrySlowQueries = 0
def timeOutException = null
def manualResultSet = null

pipeline {

    agent {
        label "kind-deployment-Slave1"
    }

    options {
        // do not allow concurrent builds to run if any job is in running state
        disableConcurrentBuilds()
        retry(2)
    }

    stages {

        stage('Running Job on slave one') {
            when {
                anyOf {
                    expression { "${manualResultSet}" == 'null' }
                    expression { "${manualResultSet}" == 'FAILURE' && "${params.IS_RETRY_NEEDED}" == 'true' }
                }
            }

            steps {
                echo "testing different jobs on master"
                retry(4) {
                    script {
                        timeOutException = null
                        timeout(time: 120, unit: 'MINUTES') {
                           try{
                                sh 'whoami'
                                sh 'hostname'
                                sh 'pwd'
                                sh 'free -mh'
                            } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                                timeOutException = e
                                retrySlowQueries = retrySlowQueries + 1
                            }
                        }
                        if (retrySlowQueries > 0 && timeOutException != null) {
                            echo "retrying testing slow queries :${retrySlowQueries}"
                            sleep(100 * 2 + 200 * retrySlowQueries)
                            error "Caught ${timeOutException.toString()}"
                        }
                    }

                }
            }
        }

        stage('Archive') {
             when {
                anyOf {
                    expression {"${manualResultSet}"=='null'}
                    expression {"${manualResultSet}"=='FAILURE' && "${params.IS_RETRY_NEEDED}" == 'true'}
                }
           }

            steps {
                archiveArtifacts artifacts: '**/*.log, **/*.json, **/*.csv, **/*.png'
            }
        }
    }
}
